// Copyright (c) 2018 Chef Software Inc. and/or applicable contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

mod listen_ctl_addr;
pub use self::listen_ctl_addr::ListenCtlAddr;
use crate::error::{Error,
                   Result};
use clap::ArgMatches;
use std::{collections::HashMap,
          result};

/// Bundles up information about the user and group that a supervised
/// service should be run as. If the Supervisor itself is running with
/// root-like permissions, then these will be for `SVC_USER` and
/// `SVC_GROUP` for a service. If not, it will be for the user the
/// Supervisor itself is running as.
///
/// On Windows, all but `username` will be `None`. On Linux,
/// `username` and `groupname` may legitimately be `None`, but `uid`
/// and `gid` should always be `Some`.
#[derive(Debug, Default)]
pub struct UserInfo {
    /// Windows required, Linux optional
    pub username: Option<String>,
    /// Linux preferred
    pub uid: Option<u32>,
    /// Linux optional
    pub groupname: Option<String>,
    /// Linux preferred
    pub gid: Option<u32>,
}

/// Captures arbitrary key-value pair metadata to attach to all events
/// generated by the Supervisor.
#[derive(Clone, Debug, Default)]
pub struct EventStreamMetadata(HashMap<String, String>);

impl Into<HashMap<String, String>> for EventStreamMetadata {
    fn into(self) -> HashMap<String, String> { self.0 }
}

impl EventStreamMetadata {
    /// The name of the Clap argument we'll use for arguments of this type.
    pub const ARG_NAME: &'static str = "EVENT_STREAM_METADATA";

    /// Ensure that user input from Clap can be converted into a
    /// key-value pair we can consume.
    ///
    /// Note: this validates each value given by the user, not all the
    /// values given at once.
    #[allow(clippy::needless_pass_by_value)] // Signature required by CLAP
    pub fn validate(value: String) -> result::Result<(), String> {
        Self::split_raw(&value).map(|_| ())
                               .map_err(|e| e.to_string())
    }

    /// Create an instance of `EventStreamMetadata` from validated
    /// user input.
    pub fn from_matches(m: &ArgMatches) -> result::Result<Self, Error> {
        let raw_meta = m.values_of(Self::ARG_NAME).unwrap_or_default();
        let mut pairs = HashMap::with_capacity(raw_meta.len());
        for raw_pair in raw_meta {
            let (k, v) = Self::split_raw(raw_pair)?;
            pairs.insert(k, v);
        }
        Ok(Self(pairs))
    }

    /// Utility function to create a key-value pair tuple from a
    /// user-provided value in Clap.
    fn split_raw(raw: &str) -> Result<(String, String)> {
        let mut pair = raw.splitn(2, '=')
                          .map(ToString::to_string)
                          .collect::<Vec<_>>();
        if pair.len() == 2 {
            if pair[0].is_empty() || pair[1].is_empty() {
                Err(Error::EventStreamMetadataError(raw.to_string()))
            } else {
                Ok((pair.remove(0), pair.remove(0)))
            }
        } else {
            Err(Error::EventStreamMetadataError(raw.to_string()))
        }
    }
}
